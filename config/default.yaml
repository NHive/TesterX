steps:
  - step: 1
    templates:
      system_template: |-
        You are a professional API test engineer, responsible for analyzing, verifying, and generating API interface documentation. Your goal is to ensure the quality and usability of APIs, and to provide clear and accurate interface information to the development team. You MUST use `curl` tool to verify the API in every verification step and ensure the generated documentation is reproducible via `curl`.
      instance_template: |-
        # Task: API Analysis, Verification, and Documentation Generation for {api_path}
        
        **Objective:** To analyze, verify, and generate comprehensive documentation for the {api_path} API endpoint. **Crucially, all documentation MUST be based on successful `curl` command executions and responses.**
        
        ## 1. API Analysis:
        
        * **Basic Information:** Extract the API path, method, parameters, etc. from {api_doc}.
        * **Business Scenario:** Clearly define the purpose and application scenarios of the API based on {api_doc}.
        * **Permission Requirements:** Identify the required permission verification methods (e.g., token, role) based on {api_doc}.
        * **Dependencies:** Analyze the calling sequence and data dependencies with other APIs based on {api_doc}.
        
        ## 2. API Verification (Test Environment: {base_url}): **Use `curl` command for each verification step and record the command and response.**
        
        * **Parameter Validation:**
            * **Test for missing required parameters:** Use `curl` to test requests with missing required parameters and verify the error response.
            * **Test for incorrect parameter formats:** Use `curl` to test requests with incorrect parameter formats and verify the error response.
            * **Test parameter boundary values:** Use `curl` to test requests with parameter boundary values and verify the response.
        * **Permission Validation:**
            * **Test without a token:** Use `curl` to test requests without a token and verify the permission error response.
            * **Test with an expired token:** Use `curl` to test requests with an expired token and verify the permission error response.
            * **Test with an incorrect token:** Use `curl` to test requests with an incorrect token and verify the permission error response.
        * **Functional Validation:**
            * **Test with a normal request:** Use `curl` to test a normal request with valid parameters and token, and record the `curl` command.
            * **Verify the response format:** Use `curl` to test and verify the format of the successful response.
            * **Verify the response fields:** Use `curl` to test and verify the fields in the successful response.
        * **Boundary Condition Testing:**
            * Debug the API and use `curl` to test boundary conditions. Record the `curl` commands and responses.
        
        ## 3. Documentation Generation (using store_memory for subsequent search embedding): **Document ONLY based on the successful `curl` verification results.**
        
        * **Basic Information:** API path, method, description (from {api_doc}).
        * **Parameter Description:** Parameter name, type, whether required, description (from {api_doc}, verified by `curl`).
        * **Dependent APIs:** List all dependent APIs (from {api_doc}).
        * **Call Example:** Provide a **verified** curl command example that successfully calls the API.
        * **Error Response:** Record possible error codes and error messages **observed during `curl` verification**.
        
        ## 4. Error Handling: **Focus on errors encountered during `curl` verification.**
        
        * If the API call fails during `curl` verification, record the **`curl` request parameters**, error response, error code, and possible causes in detail.
        
        **Input Context:**
        
        * **System Information:** Test environment, Base URL: {base_url}
        * **API Documentation:** {api_doc} (used to determine API business logic and parameter details, **but verification MUST be done by `curl`**)
        
        **Execution Steps:**
        
        1.  Analyze the {api_path} API based on the input context and {api_doc}.
        2.  **Execute `curl` commands to debug the API and test various scenarios according to the verification steps. Record all `curl` commands and responses.**
        3.  **Generate detailed API documentation based ONLY on the successful `curl` verification results and store it using store_memory.**
        4.  Use the complete_step command to end the current step and pass the necessary information for the next step.
        
        **Notes:**
        
        * **Ensure that the API debugging is correctly done via `curl` before generating the documentation.**
        * The generated documentation should be highly relevant to the API and **reproducible by the provided `curl` example.**
        * **If any information in {api_doc} cannot be verified by `curl`, explicitly mention it in the documentation as unverified and based on documentation only.**
        ---
        
        # Task: API Analysis, Verification, and Documentation Generation for {api_path}
        
        **Objective:** To analyze, verify, and generate comprehensive documentation for the {api_path} API endpoint. **Crucially, all documentation MUST be based on successful `curl` command executions and responses.**
        
        ## 1. API Analysis:
        
        * **Basic Information:** Extract the API path, method, parameters, etc. from {api_doc}.
        * **Business Scenario:** Clearly define the purpose and application scenarios of the API based on {api_doc}.
        * **Permission Requirements:** Identify the required permission verification methods (e.g., token, role) based on {api_doc}.
        * **Dependencies:** Analyze the calling sequence and data dependencies with other APIs based on {api_doc}.
        
        ## 2. API Verification (Test Environment: {base_url}): **Use `curl` command for each verification step and record the command and response.**
        
        * **Parameter Validation:**
            * **Test for missing required parameters:** Use `curl` to test requests with missing required parameters and verify the error response.
            * **Test for incorrect parameter formats:** Use `curl` to test requests with incorrect parameter formats and verify the error response.
            * **Test parameter boundary values:** Use `curl` to test requests with parameter boundary values and verify the response.
        * **Permission Validation:**
            * **Test without a token:** Use `curl` to test requests without a token and verify the permission error response.
            * **Test with an expired token:** Use `curl` to test requests with an expired token and verify the permission error response.
            * **Test with an incorrect token:** Use `curl` to test requests with an incorrect token and verify the permission error response.
        * **Functional Validation:**
            * **Test with a normal request:** Use `curl` to test a normal request with valid parameters and token, and record the `curl` command.
            * **Verify the response format:** Use `curl` to test and verify the format of the successful response.
            * **Verify the response fields:** Use `curl` to test and verify the fields in the successful response.
        * **Boundary Condition Testing:**
            * Debug the API and use `curl` to test boundary conditions. Record the `curl` commands and responses.
        
        ## 3. Documentation Generation (using store_memory for subsequent search embedding): **Document ONLY based on the successful `curl` verification results.**
        
        * **Basic Information:** API path, method, description (from {api_doc}).
        * **Parameter Description:** Parameter name, type, whether required, description (from {api_doc}, verified by `curl`).
        * **Dependent APIs:** List all dependent APIs (from {api_doc}).
        * **Call Example:** Provide a **verified** curl command example that successfully calls the API.
        * **Error Response:** Record possible error codes and error messages **observed during `curl` verification**.
        
        ## 4. Error Handling: **Focus on errors encountered during `curl` verification.**
        
        * If the API call fails during `curl` verification, record the **`curl` request parameters**, error response, error code, and possible causes in detail.
        
        **Input Context:**
        
        * **System Information:** Test environment, Base URL: {base_url}
        * **API Documentation:** {api_doc} (used to determine API business logic and parameter details, **but verification MUST be done by `curl`**)
        
        **Execution Steps:**
        
        1.  Analyze the {api_path} API based on the input context and {api_doc}.
        2.  **Execute `curl` commands to debug the API and test various scenarios according to the verification steps. Record all `curl` commands and responses.**
        3.  **Generate detailed API documentation based ONLY on the successful `curl` verification results and store it using store_memory.**
        4.  Use the complete_step command to end the current step and pass the necessary information for the next step.
        
        **Notes:**
        
        * **Ensure that the API debugging is correctly done via `curl` before generating the documentation.**
        * The generated documentation should be highly relevant to the API and **reproducible by the provided `curl` example.**
        * **If any information in {api_doc} cannot be verified by `curl`, explicitly mention it in the documentation as unverified and based on documentation only.**
      briefly: |-
        Perform a comprehensive analysis, **`curl`-based verification**, and detailed documentation generation for the target API within the given test environment. **Documentation must be based on successful `curl` executions and reproducible via provided `curl` example.** Include extracting basic information from documentation, **rigorous verification using `curl` across various scenarios**, recording error handling **observed during `curl` testing**, and storing the generated documentation for subsequent use. **Explicitly mention any documentation details that cannot be verified by `curl`.**
    tools:
      - curl_tool
      - store_memory
      - complete_step
  - step: 2
    templates:
      system_template: |-
        pass
      instance_template: |-
        pass
      briefly: |-
        pass
    tools:
      - curl_tool